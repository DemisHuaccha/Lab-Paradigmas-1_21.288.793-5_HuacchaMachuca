#lang racket

(require "funciones-aux_21288793-5_HuacchaMachuca.rkt")
(require "tda-option_21288793-5_HuacchaMachuca.rkt")
(require "tda-flow_21288793-5_HuacchaMachuca.rkt")
(require "tda-chatbot_21288793-5_HuacchaMachuca.rkt")


;Funciones system ;


(define (system name initial-Chatbot-code-link . chatbot)   ; Estructura Base System
  (if (null? chatbot)
      (cons name initial-Chatbot-code-link)
      (cons name (cons initial-Chatbot-code-link (verificar-bot chatbot)))
      )
  )

(define (system-add-chatbot system chatbot)
  (if (null? (get-chatbot-system system))
      (cons (get-name-system) (cons get-initial-chatbot-code system (cons (get-chatbot-system system) chatbot)))
      (if (not (null? (filter (lambda(x)(eq? x (get-id-chatbot chatbot))) ( get-chatbot-id-system (get-chatbot-system system)) )))
          (cons (car system) (cdr system))
          (cons (get-name-system system)(cons (get-initial-chatbot-code system) (cons (get-chatbot-system system) chatbot)))
          )
      )
  )

;-------------------------System - User------------------------------------;
(define (get-system-users system)
  (list (cdr system))
  )


(define (system-add-user system user)
      (if (number? (car (cdr system)))
          (cons system (list user))
          (if (string? (car (cdr system)))
              (if (null? (filter (lambda (x)(eq? x user)) (cdr system)))
                  (cons (car system) (convinar-user2 (cdr system) user))
                  (cons (car system) (cdr system))
                  )
              (list )
          )
      )
  )


(define (system-login system user)
      (if (string? (cdr system))
          (cons (car system) (cdr system) )
          (if (number?  (car (cdr system)))
              (cons (car system)(cdr system))
              (if (null? (filter (lambda (x)(eq? x user)) (cdr system)))
                  (cons (car system) (cdr system))
                  (cons system user)
                  )
          )
      )
  )

(define (system-logout system)
      (if (string? (cdr system))
          (car system)
          (and (display "No hay sesion abierta") (cons (car system) (cdr system)) )
          )
  )

;-----------------------System Talk---------------------------;

(define (system-talk-rec system message) ;system-talk hecho para ser el primero en ser llamado verificar que es un systema con usuarios registrados y transferir el llamado a system-talk-2
  (if (not (string? (cdr system) ))
      (void)
      (and (display (car (car system)))(newline)(display (car (cdr (cdr (car (cdr (cdr (car system))))))))(newline)(system-talk-rec2 (car system) (message) ))
      )
  )

(define (obt-lista-id-bot bots lista)
  (if (null? bots)
      (cons (car lista) (cdr lista))
      (if (null? lista)
          (obt-lista-id-bot (cdr bots) (cons (car (car bots)) null))
          (obt-lista-id-bot (cdr bots) (cons (car lista) (cons (cdr lista) (car (car bots)))))
          )
      )
  )
(define (obt-bot-system bots id)
  (if (null? bots)
      (null)
      (if (eq? (car (car bots)) id)
          (car bots)
          (obt-bot-system (cdr bots) id)
          )
      )
  )

(define (system-talk-rec2 system message)
  (if (null? (filter (lambda (x) (eq? x message))(obt-lista-id-bot (cdr (cdr system)) (list ))))
      (display "Error")
      ( (obt-bot-system (cdr (cdr system)) (car (cdr system))))
      )
  )

;--------------------------TEST 1-----------------------------;

(define op1 (option  1 "1) Viajar" 1 1 "viajar" "turistear" "conocer"))
(define op2 (option  2 "2) Estudiar" 2 1 "estudiar" "aprender" "perfeccionarme"))
(define op3 (option  3 "2) Estudiar" 2 1 "estudiar" "aprender" "perfeccionarme"))
(define f10 (flow 1 "Flujo Principal Chatbot 1\nBienvenido\n¿Qué te gustaría hacer?" op1 op2 op2 op2 op1)) ;solo añade una ocurrencia de op2 y op1
(define f11 (flow-add-option f10 op2)) ;se intenta añadir opción duplicada
(define f12 (flow 2 "Flujo Principal Chatbot 1\nBienvenido\n¿Qué te gustaría hacer?" op1 op2 op3 op2 op1))
(define cb0 (chatbot 0 "Inicial" "Bienvenido\n¿Qué te gustaría hacer?" 1 f10 f10 f10 f10))  ;solo añade una ocurrencia de f10
(define cb1 (chatbot 1 "Inicial" "Bienvenido\n¿Qué te gustaría hacer?" 1 f10 f12 f10 f10))
(define s0 (system "Chatbots Paradigmas" 0 cb0 cb0 cb0))
(define s1 (system-add-chatbot s0 cb0)) ;igual a s0
(define s2 (system-add-user s1 "user1"))
(define s3 (system-add-user s2 "user2"))
(define s4 (system-add-user s3 "user2")) ;solo añade un ocurrencia de user2
(define s5 (system-add-user s4 "user3"))
(define s6 (system-login s5 "user8")) ;user8 no existe. No inicia sesión
(define s7 (system-login s6 "user1"))
(define s8 (system-login s7 "user2"))  ;no permite iniciar sesión a user2, pues user1 ya inició sesión
(define s9 (system-logout s8))
(define s10 (system-login s9 "user2"))
